name: Update Python Dependencies

on:
  workflow_call:
    secrets:
      GH_PAT:
        required: true

jobs:
  check-compatibility:
    runs-on: ubuntu-latest
    outputs:
      working-version: ${{ steps.find-version.outputs.version }}
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - id: test-install
        if: hashFiles('requirements.txt') != ''
        continue-on-error: true
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          echo "success=true" >> $GITHUB_OUTPUT
      - id: find-version
        if: steps.test-install.outputs.success == 'true'
        run: echo "version=${{ matrix.python-version }}" >> $GITHUB_OUTPUT

  update-dependencies:
    needs: check-compatibility
    if: needs.check-compatibility.outputs.working-version != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.check-compatibility.outputs.working-version }}
          cache: "pip"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip build setuptools wheel
          pip install -r requirements.txt
      
      - name: Check outdated dependencies
        id: outdated
        run: |
          outdated_deps=$(pip list --outdated --format json)
          echo "outdated=$outdated_deps" >> $GITHUB_OUTPUT
      
      - name: Process outdated dependencies
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          outdated_deps='${{ steps.outdated.outputs.outdated }}'
          echo "$outdated_deps" | jq -c '.[]' | while read -r dep; do
            package_name=$(echo "$dep" | jq -r '.name')
            current_version=$(echo "$dep" | jq -r '.version')
            latest_version=$(echo "$dep" | jq -r '.latest_version')
            
            if grep -q "${package_name}" requirements.txt; then
              # Call shared branch management workflow
              gh workflow run shared-branch-management.yml \
                -f branch-prefix="update-python" \
                -f package-name="$package_name" \
                -f current-version="$current_version" \
                -f latest-version="$latest_version" \
                -f test-details="Tested with Python ${{ needs.check-compatibility.outputs.working-version }}" \
                -s GH_PAT="${{ secrets.GH_PAT }}"
              
              # Update the dependency in requirements.txt
              sed -i "s/${package_name}==${current_version}/${package_name}==${latest_version}/" requirements.txt
              git add requirements.txt
              git commit -m "Update ${package_name} to ${latest_version}"
              git push origin HEAD
            fi
          done